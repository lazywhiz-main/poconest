import React, { useState, useEffect, useCallback } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  SafeAreaView,
  useWindowDimensions,
  ActivityIndicator,
  TextInput,
  FlatList,
  Modal,
  Alert
} from 'react-native';
import { useZoomSpace } from '../hooks/useZoomSpace';
import MeetingList from './MeetingList';
import RecordingPlayer from './RecordingPlayer';
import MeetingInsights from './MeetingInsights';
import MeetingForm from './MeetingForm';
import MeetingDetailPanel from './MeetingDetailPanel';
import { supabase } from '../../../../services/supabase/client';
import { useNest } from '../../../nest/contexts/NestContext';
import { useAuth } from '../../../../contexts/AuthContext';
import MeetingDetail from './MeetingDetail';
import { Meeting, MeetingUI, toMeetingUI, toMeetingDB, CardExtractionSettings } from '../../../meeting-space/types/meeting';
import EmptyState from '../../../../components/ui/EmptyState';
import Input from '../../../../components/ui/Input';
import Tag from '../../../../components/ui/Tag';
import StatusBadge from '../../../../components/ui/StatusBadge';
import Button from '../../../../components/common/Button';
import { Icon } from '../../../../components/Icon';
import { generateMeetingSummary, extractCardsFromMeeting } from '../../../../services/ai/openai';
import { BoardCardUI } from '../../../../types/board';
import { getOrCreateDefaultBoard, addCardsToBoard } from '../../../../services/BoardService';
import { getOrCreateMeetingSource, addCardSource } from '@/services/BoardService';
import { getUsersByIds, UserInfo } from '../../../../services/UserService';
import { useToast } from '../../../../components/ui/Toast';
import { useBackgroundJobs } from '../../../meeting-space/hooks/useBackgroundJobs';
import { JobType } from '../../../meeting-space/types/backgroundJob';

// Áµ±Âêà„Éü„Éº„ÉÜ„Ç£„É≥„Ç∞Ê©üËÉΩ
import { useUnifiedMeetings } from '../../../meeting-space/hooks/useUnifiedMeetings';
import { UnifiedMeeting } from '../../../meeting-space/types/unifiedMeeting';
import UnifiedMeetingList from '../../../meeting-space/components/UnifiedMeetingList';
import { StorageService } from '../../../../services/StorageService';

// Êñ∞„Åó„ÅÑ„Éï„Ç°„Ç§„É´Âá¶ÁêÜÊ©üËÉΩ
import { useFileProcessing } from '../../../meeting-space/hooks/useFileProcessing';
import FileProcessingStatus from '../../../meeting-space/components/FileProcessingStatus';
import ScheduledMeetingForm from './ScheduledMeetingForm';

interface MeetingSpaceProps {
  nestId: string;
}

// ZoomSpace„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà
const MeetingSpace: React.FC<MeetingSpaceProps> = ({ nestId }) => {
  const { width } = useWindowDimensions();
  const isDesktop = width > 1024;
  const isTablet = width > 768 && width <= 1024;
  
  // useZoomSpace„ÅØ‰Ωø„Çè„Åö„ÄÅCRUDÁî®state„ÅÆ„ÅøÂà©Áî®
  
  const { currentNest } = useNest();
  const { user } = useAuth();
  const { showToast } = useToast();
  const { createJob, getJobsByMeeting } = useBackgroundJobs();
  
  // Êñ∞„Åó„ÅÑ„Éï„Ç°„Ç§„É´Âá¶ÁêÜÁÆ°ÁêÜ
  const fileProcessing = useFileProcessing();
  
  // Êñ∞„Åó„ÅÑ„Ç¢„Éº„Ç≠„ÉÜ„ÇØ„ÉÅ„É£„Åß„ÅÆ„Éï„Ç°„Ç§„É´Âá¶ÁêÜÈñ¢Êï∞
  const processFileWithDetailedStatus = useCallback(async (
    meetingId: string, 
    file: File, 
    sessionId: string
  ) => {
    try {
      // Step 1: „Éï„Ç°„Ç§„É´Ê§úË®º
      fileProcessing.updateStep('VALIDATION', {
        status: 'running',
        progress: 50,
        message: '„Éï„Ç°„Ç§„É´ÂΩ¢Âºè„ÇíÁ¢∫Ë™ç‰∏≠...'
      });
      
      await new Promise(resolve => setTimeout(resolve, 500)); // UIÂèçÊò†„ÅÆ„Åü„ÇÅÂ∞ë„ÅóÂæÖÊ©ü
      
      fileProcessing.updateStep('VALIDATION', {
        status: 'completed',
        progress: 100,
        message: '„Éï„Ç°„Ç§„É´Ê§úË®ºÂÆå‰∫Ü'
      });
      
      // Step 2: Êñ∞„Åó„ÅÑ„Ç¢„Éº„Ç≠„ÉÜ„ÇØ„ÉÅ„É£„Åß„ÅÆÊñáÂ≠óËµ∑„Åì„ÅóÂá¶ÁêÜ
      fileProcessing.updateStep('UPLOAD', {
        status: 'running',
        progress: 0,
        message: 'GCS„Å´„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ‰∏≠...'
      });
      
      console.log('üîß [processFileWithDetailedStatus] Êñ∞„Åó„ÅÑ„Ç¢„Éº„Ç≠„ÉÜ„ÇØ„ÉÅ„É£„ÅßÂá¶ÁêÜÈñãÂßã');
      
      const { TranscriptionServiceV2 } = await import('../../../../services/TranscriptionServiceV2');
      
      fileProcessing.updateStep('UPLOAD', {
        progress: 50,
        message: 'ÁΩ≤Âêç‰ªò„ÅçURLÂèñÂæó‰∏≠...'
      });
      
      const result = await TranscriptionServiceV2.transcribeAudio(
        file,
        meetingId,
        nestId
      );
      
      if (!result.success) {
        throw new Error(result.error || 'ÊñáÂ≠óËµ∑„Åì„ÅóÂá¶ÁêÜ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
      }
      
      fileProcessing.updateStep('UPLOAD', {
        status: 'completed',
        progress: 100,
        message: '„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÂÆå‰∫Ü'
      });
      
      // Step 3: ÊñáÂ≠óËµ∑„Åì„Åó„Ç∏„Éß„ÉñÈñãÂßã
      fileProcessing.updateStep('TRANSCRIPTION_START', {
        status: 'completed',
        progress: 100,
        message: 'ÊñáÂ≠óËµ∑„Åì„Åó„Ç∏„Éß„ÉñÈñãÂßãÂÆå‰∫Ü'
      });
      
      // Step 4: Âá¶ÁêÜÂÆå‰∫ÜÂæÖÊ©ü
      fileProcessing.updateStep('TRANSCRIPTION_PROCESS', {
        status: 'running',
        progress: 10,
        message: 'ÊñáÂ≠óËµ∑„Åì„ÅóÂá¶ÁêÜ‰∏≠...'
      });
      
      // ÂÆüÈöõ„ÅÆÂá¶ÁêÜ„ÅØÈùûÂêåÊúü„ÅßÂÆüË°å„Åï„Çå„Çã„Åü„ÇÅ„ÄÅ„Åì„Åì„Åß„ÅØÂÆå‰∫Ü„É°„ÉÉ„Çª„Éº„Ç∏„ÇíË°®Á§∫
      fileProcessing.updateStep('TRANSCRIPTION_PROCESS', {
        status: 'completed',
        progress: 100,
        message: 'ÊñáÂ≠óËµ∑„Åì„Åó„Ç∏„Éß„Éñ„ÅåÈñãÂßã„Åï„Çå„Åæ„Åó„Åü'
      });
      
      // Step 5: ÁµêÊûú‰øùÂ≠ò
      fileProcessing.updateStep('TRANSCRIPTION_SAVE', {
        status: 'completed',
        progress: 100,
        message: '„Ç∏„Éß„ÉñÊÉÖÂ†±„Çí‰øùÂ≠ò„Åó„Åæ„Åó„Åü'
      });
      
      // „Çª„ÉÉ„Ç∑„Éß„É≥ÂÆå‰∫Ü
      fileProcessing.completeSession(true, {
        storagePath: `gcs://poconest-audio-files/${result.jobId}`,
        transcriptText: 'ÊñáÂ≠óËµ∑„Åì„Åó„Ç∏„Éß„Éñ„ÅåÈñãÂßã„Åï„Çå„Åæ„Åó„Åü„ÄÇÂá¶ÁêÜÂÆå‰∫Ü„Åæ„Åß„ÅäÂæÖ„Å°„Åè„Å†„Åï„ÅÑ„ÄÇ',
        processingTime: Date.now() - new Date(fileProcessing.currentSession?.startTime || 0).getTime()
      });
      
    } catch (error) {
      console.error('Ë©≥Á¥∞„Éï„Ç°„Ç§„É´Âá¶ÁêÜ„Ç®„É©„Éº:', error);
      fileProcessing.completeSession(false, undefined, error instanceof Error ? error.message : 'Unknown error');
    }
  }, [fileProcessing, nestId]);
  
  // Áµ±Âêà„Éü„Éº„ÉÜ„Ç£„É≥„Ç∞Ê©üËÉΩ
  const {
    meetings: unifiedMeetings,
    selectedMeeting: selectedUnifiedMeeting,
    isLoading: loadingUnifiedMeetings,
    selectMeeting: selectUnifiedMeeting,
    migrateScheduledToActual,
    refresh: refreshUnifiedMeetings,
  } = useUnifiedMeetings(nestId);

  // „É¶„Éº„Ç∂„ÉºÊÉÖÂ†±„ÅÆÂèñÂæó
  useEffect(() => {
    const fetchUsers = async () => {
      if (unifiedMeetings.length === 0) return;
      
      // ‰ΩúÊàêËÄÖID„ÇíÂèéÈõÜ
      const creatorIds = unifiedMeetings
        .map(meeting => meeting.createdBy)
        .filter((id): id is string => !!id);
      
      if (creatorIds.length > 0) {
        const userInfos = await getUsersByIds(creatorIds);
        setUsers(userInfos);
      }
    };

    fetchUsers();
  }, [unifiedMeetings]);

  const [showForm, setShowForm] = useState(false);
  const [showScheduledForm, setShowScheduledForm] = useState(false);
  // Áµ±Âêà„Éì„É•„Éº„ÇíÂ∏∏„Å´‰ΩøÁî®
  const useUnifiedView = true;
  
  const [meetingSpace, setMeetingSpace] = useState<any>(null);
  const [checkingSpace, setCheckingSpace] = useState(true);
  const [creatingSpace, setCreatingSpace] = useState(false);
  
  const [searchQuery, setSearchQuery] = useState('');
  const [uploadResult, setUploadResult] = useState('');
  const [transcript, setTranscript] = useState('');
  const [summary, setSummary] = useState('');
  const [extracting, setExtracting] = useState(false);
  

  const [selectedMeeting, setSelectedMeeting] = useState<MeetingUI | null>(null);
  
  // Background jobsÁä∂ÊÖãÁÆ°ÁêÜ
  const activeJobs = selectedMeeting ? getJobsByMeeting(selectedMeeting.id).filter(job => 
    job.status === 'pending' || job.status === 'running'
  ) : [];
  
  const currentRunningJob = activeJobs.find(job => job.status === 'running')?.type || null;
  
  // üîß „Ç∑„É≥„Éó„É´„Å™„Ç∏„Éß„ÉñÂÆüË°åÁä∂ÊÖã„ÉÅ„Çß„ÉÉ„ÇØ
  const isJobRunning = (jobType: 'ai_summary' | 'card_extraction') => {
    return activeJobs.some(job => job.type === jobType);
  };
  
  // „Çø„ÉñÁä∂ÊÖãÁÆ°ÁêÜ
  const [activeTab, setActiveTab] = useState<'transcript' | 'summary' | 'speaker-analysis' | 'cards'>('transcript');
  
  const [users, setUsers] = useState<Record<string, UserInfo>>({});
  
  // „Éâ„É©„ÉÉ„Ç∞&„Éâ„É≠„ÉÉ„ÉóÁî®„ÅÆstate
  const [isDragOver, setIsDragOver] = useState(false);
  const [droppedFile, setDroppedFile] = useState<File | null>(null);
  
  // „Éü„Éº„ÉÜ„Ç£„É≥„Ç∞Á©∫Èñì„ÅÆÂ≠òÂú®„ÉÅ„Çß„ÉÉ„ÇØ
  useEffect(() => {
    if (!currentNest?.id) return;
    const checkMeetingSpace = async () => {
      setCheckingSpace(true);
      const { data, error } = await supabase
        .from('spaces')
        .select('*')
        .eq('type', 'meeting')
        .eq('nest_id', currentNest.id)
        .eq('is_active', true)
        .limit(1)
        .single();
      if (data) setMeetingSpace(data);
      setCheckingSpace(false);
    };
    checkMeetingSpace();
  }, [currentNest?.id]);
  
  // „Éü„Éº„ÉÜ„Ç£„É≥„Ç∞Á©∫Èñì‰ΩúÊàê
  const handleCreateMeetingSpace = async () => {
    if (!currentNest?.id || !user?.id) return;
    setCreatingSpace(true);
    const { data, error } = await supabase
      .from('spaces')
      .insert([
        {
          nest_id: currentNest.id,
          type: 'meeting',
          name: '„Éü„Éº„ÉÜ„Ç£„É≥„Ç∞',
          created_by: user.id,
          is_active: true,
        },
      ])
      .select()
      .single();
    if (data) setMeetingSpace(data);
    setCreatingSpace(false);
  };
  

  
  // Êñ∞Ë¶è‰ΩúÊàê„Éè„É≥„Éâ„É©
  const handleCreateMeeting = useCallback(async (formData: any) => {
    setShowForm(false);
    setDroppedFile(null);
    
    const now = new Date().toISOString();
    if (!(formData.date instanceof Date) || isNaN(formData.date.getTime())) {
      showToast({ title: '„Ç®„É©„Éº', message: 'Êó•ÊôÇ„Åå‰∏çÊ≠£„Åß„Åô„ÄÇÊ≠£„Åó„ÅÑÂΩ¢Âºè„ÅßÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ', type: 'error' });
      return;
    }
    
    // Èü≥Â£∞„ÉªÂãïÁîª„Éï„Ç°„Ç§„É´„ÅåÂê´„Åæ„Çå„Å¶„ÅÑ„Çã„Åã„ÉÅ„Çß„ÉÉ„ÇØ
    const hasAudioVideo = droppedFile && (
      droppedFile.type.startsWith('audio/') || droppedFile.type.startsWith('video/')
    );
    
    const dbMeeting: Meeting = {
      id: crypto.randomUUID(),
      nest_id: nestId,
      title: formData.title,
      description: '',
      start_time: formData.date.toISOString(),
      end_time: formData.date.toISOString(),
      participants: [],
      uploaded_files: [],
      recording_url: '',
      transcript: hasAudioVideo ? '' : (formData.transcript || ''), // Èü≥Â£∞„ÉªÂãïÁîª„ÅÆÂ†¥Âêà„ÅØÁ©∫„Å´„Åó„Å¶Âæå„ÅßÊñáÂ≠óËµ∑„Åì„Åó
      ai_summary: '',
      status: 'scheduled',
      tags: [],
      created_at: now,
      updated_at: now,
      created_by: user?.id || user?.email || 'unknown',
      deleted_at: null,
    };
    
    const { error } = await supabase.from('meetings').insert([dbMeeting]);
    if (error) {
      showToast({ title: '„Ç®„É©„Éº', message: `„Éü„Éº„ÉÜ„Ç£„É≥„Ç∞„ÅÆ‰øùÂ≠ò„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ${error.message}`, type: 'error' });
      return;
    }
    
    // Èü≥Â£∞„ÉªÂãïÁîª„Éï„Ç°„Ç§„É´„ÅÆÂ†¥Âêà„ÄÅË©≥Á¥∞„Å™ÊñáÂ≠óËµ∑„Åì„ÅóÂá¶ÁêÜ„ÇíÈñãÂßã
    if (hasAudioVideo && user?.id) {
      // Êñ∞„Åó„ÅÑË©≥Á¥∞Áä∂ÊÖãÁÆ°ÁêÜ„Åß„Éï„Ç°„Ç§„É´Âá¶ÁêÜÈñãÂßã
      const sessionId = fileProcessing.startProcessing(dbMeeting.id, droppedFile);
      
      // ÈùûÂêåÊúü„Åß„Éï„Ç°„Ç§„É´Âá¶ÁêÜ„ÇíÂÆüË°å
      processFileWithDetailedStatus(dbMeeting.id, droppedFile, sessionId);
    } else {
      console.log('üîß Êñ∞Ë¶è„Éü„Éº„ÉÜ„Ç£„É≥„Ç∞ - Èü≥Â£∞„ÉªÂãïÁîª„Éï„Ç°„Ç§„É´„Å™„Åó„ÄÅ„Åæ„Åü„ÅØ„É¶„Éº„Ç∂„ÉºÊÉÖÂ†±„Å™„Åó');
      showToast({ title: 'ÊàêÂäü', message: '„Éü„Éº„ÉÜ„Ç£„É≥„Ç∞„Çí‰ΩúÊàê„Åó„Åæ„Åó„Åü„ÄÇ', type: 'success' });
    }
    
    // Áµ±ÂêàË°®Á§∫„ÅÆ„É™„Çπ„ÉàÊõ¥Êñ∞
    await refreshUnifiedMeetings();
  }, [nestId, user?.id, user?.email, refreshUnifiedMeetings, droppedFile, createJob, showToast]);
  
  // „Éü„Éº„ÉÜ„Ç£„É≥„Ç∞ÈÅ∏Êäû
  const handleSelectMeeting = (meeting: MeetingUI) => setSelectedMeeting(meeting);

  // Áµ±Âêà„Éü„Éº„ÉÜ„Ç£„É≥„Ç∞ÈÅ∏Êäû„Éè„É≥„Éâ„É©
  const handleSelectUnifiedMeeting = useCallback((meeting: UnifiedMeeting | null) => {
    selectUnifiedMeeting(meeting);
    
    // ÂÆüÈöõ„ÅÆ„Éü„Éº„ÉÜ„Ç£„É≥„Ç∞„ÅÆÂ†¥Âêà„ÄÅ„É¨„Ç¨„Ç∑„ÉºMeetingUIÂΩ¢Âºè„Å´Â§âÊèõ
    if (meeting?.type === 'actual' && meeting.actualMeetingId) {
      const legacyMeeting: MeetingUI = {
        id: meeting.actualMeetingId,
        nestId: meeting.nestId,
        title: meeting.title,
        description: meeting.description,
        startTime: meeting.startTime.toISOString(),
        endTime: meeting.endTime?.toISOString() || meeting.startTime.toISOString(),
        participants: meeting.participants,
        uploadedFiles: meeting.actualData?.uploadedFiles || [],
        recordingUrl: meeting.actualData?.recordingUrl,
        transcript: meeting.actualData?.transcript,
        aiSummary: meeting.actualData?.aiSummary,
        status: meeting.status === 'in_progress' ? 'scheduled' : meeting.status,
        tags: meeting.tags,
        createdAt: meeting.createdAt.toISOString(),
        updatedAt: meeting.updatedAt.toISOString(),
        createdBy: meeting.createdBy,
        deletedAt: null,
      };
      setSelectedMeeting(legacyMeeting);
    } else {
      setSelectedMeeting(null);
    }
  }, [selectUnifiedMeeting]);

  // ‰∫àÁ¥Ñ„Éü„Éº„ÉÜ„Ç£„É≥„Ç∞„ÅÆÂÆüÈöõ„ÅÆ„Éü„Éº„ÉÜ„Ç£„É≥„Ç∞„Å∏„ÅÆÁßªË°å
  const handleMigrateToActual = useCallback(async (scheduledMeetingId: string) => {
    try {
      await migrateScheduledToActual(scheduledMeetingId);
      showToast({ title: 'ÊàêÂäü', message: '„Éü„Éº„ÉÜ„Ç£„É≥„Ç∞„ÅåÈñãÂßã„Åï„Çå„Åæ„Åó„Åü', type: 'success' });
    } catch (error) {
      showToast({ title: '„Ç®„É©„Éº', message: '„Éü„Éº„ÉÜ„Ç£„É≥„Ç∞„ÅÆÈñãÂßã„Å´Â§±Êïó„Åó„Åæ„Åó„Åü', type: 'error' });
      console.error('Failed to migrate scheduled meeting:', error);
    }
  }, [migrateScheduledToActual, showToast]);
  
  // „Éâ„É©„ÉÉ„Ç∞&„Éâ„É≠„ÉÉ„Éó„Éè„É≥„Éâ„É©„Éº
  const handleDragOver = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragOver(true);
  };
  
  const handleDragLeave = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragOver(false);
  };
  
  const handleFileDrop = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragOver(false);
    
    const files = e.dataTransfer?.files;
    if (files && files.length > 0) {
      const file = files[0];
      
      // „Éï„Ç°„Ç§„É´„Çµ„Ç§„Ç∫„Çí„ÉÅ„Çß„ÉÉ„ÇØÔºà200MBÂà∂ÈôêÔºâ
      const maxSizeBytes = 200 * 1024 * 1024; // 200MB
      if (file.size > maxSizeBytes) {
        showToast({ 
          title: '„Ç®„É©„Éº', 
          message: `„Éï„Ç°„Ç§„É´„Çµ„Ç§„Ç∫„ÅåÂ§ß„Åç„Åô„Åé„Åæ„Åô„ÄÇ200MB‰ª•‰∏ã„ÅÆ„Éï„Ç°„Ç§„É´„Çí„ÅîÂà©Áî®„Åè„Å†„Åï„ÅÑ„ÄÇÔºàÁèæÂú®: ${Math.round(file.size / (1024 * 1024))}MBÔºâ`, 
          type: 'error' 
        });
        return;
      }
      
      // „Éï„Ç°„Ç§„É´„Çø„Ç§„Éó„Çí„ÉÅ„Çß„ÉÉ„ÇØ
      const supportedTypes = [
        'text/plain',
        'video/mp4',
        'video/webm',
        'video/quicktime',
        'audio/mp3',
        'audio/wav',
        'audio/m4a',
        'application/pdf'
      ];
      
      if (supportedTypes.some(type => file.type.startsWith(type.split('/')[0]) || file.type === type)) {
        // Â∏∏„Å´Ë®≠ÂÆöÁîªÈù¢Ôºà„Çµ„Ç§„Éâ„Éî„Éº„ÇØÔºâ„ÇíË°®Á§∫„Åó„Å¶„Åã„Çâ„Éü„Éº„ÉÜ„Ç£„É≥„Ç∞‰ΩúÊàê+ÊñáÂ≠óËµ∑„Åì„ÅóÈñãÂßã
        setDroppedFile(file);
        setShowForm(true);
      } else {
        showToast({ 
          title: '„Ç®„É©„Éº', 
          message: '„Çµ„Éù„Éº„Éà„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑ„Éï„Ç°„Ç§„É´ÂΩ¢Âºè„Åß„Åô„ÄÇ„ÉÜ„Ç≠„Çπ„Éà„ÄÅÂãïÁîª„ÄÅÈü≥Â£∞„ÄÅPDF„Éï„Ç°„Ç§„É´„Çí„ÅîÂà©Áî®„Åè„Å†„Åï„ÅÑ„ÄÇ', 
          type: 'error' 
        });
      }
    }
  };
  
  // „Éü„Éº„ÉÜ„Ç£„É≥„Ç∞Êõ¥Êñ∞
  const handleUpdateMeeting = useCallback(async (updates: Partial<MeetingUI>) => {
    if (!selectedMeeting) return;
    
    // Supabase„Å´‰øùÂ≠ò
    const { error } = await supabase
      .from('meetings')
      .update({
        title: updates.title || selectedMeeting.title,
        start_time: updates.startTime || selectedMeeting.startTime,
        transcript: updates.transcript !== undefined ? updates.transcript : selectedMeeting.transcript,
        ai_summary: updates.aiSummary !== undefined ? updates.aiSummary : selectedMeeting.aiSummary,
        updated_at: new Date().toISOString(),
      })
      .eq('id', selectedMeeting.id);
    
    if (error) {
      console.error('„Éü„Éº„ÉÜ„Ç£„É≥„Ç∞Êõ¥Êñ∞„Ç®„É©„Éº:', error);
      alert('„Éü„Éº„ÉÜ„Ç£„É≥„Ç∞„ÅÆÊõ¥Êñ∞„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ' + error.message);
      return;
    }
    
    // selectedMeeting„ÇíÊúÄÊñ∞„ÅÆÁä∂ÊÖã„ÅßÊõ¥Êñ∞
    const { data: updatedMeeting } = await supabase
      .from('meetings')
      .select('*')
      .eq('id', selectedMeeting.id)
      .single();
    
    if (updatedMeeting) {
      setSelectedMeeting(toMeetingUI(updatedMeeting));
    }
  }, [selectedMeeting]);

  // „Éü„Éº„ÉÜ„Ç£„É≥„Ç∞ÂâäÈô§ÔºàUnifiedMeetingService„Çí‰ΩøÁî®Ôºâ
  const handleDeleteMeeting = useCallback(async (meetingId: string) => {
    try {
      // ÈÅ∏Êäû„Åï„Çå„Åü„Éü„Éº„ÉÜ„Ç£„É≥„Ç∞„ÇíÂèñÂæó
      const meetingToDelete = selectedUnifiedMeeting || selectedMeeting;
      if (!meetingToDelete) {
        console.error('ÂâäÈô§ÂØæË±°„ÅÆ„Éü„Éº„ÉÜ„Ç£„É≥„Ç∞„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì');
        return;
      }

      // UnifiedMeetingService„Çí‰ΩøÁî®„Åó„Å¶„Éü„Éº„ÉÜ„Ç£„É≥„Ç∞„ÇíÂâäÈô§
      const { UnifiedMeetingService } = await import('../../../meeting-space/services/UnifiedMeetingService');
      const meetingService = new UnifiedMeetingService();
      
      // MeetingUI„ÇíUnifiedMeeting„Å´Â§âÊèõ
      if (meetingToDelete && 'type' in meetingToDelete) {
        // Êó¢„Å´UnifiedMeeting„ÅÆÂ†¥Âêà
        await meetingService.deleteMeeting(meetingToDelete);
      } else if (meetingToDelete) {
        // MeetingUI„ÅÆÂ†¥Âêà„ÄÅUnifiedMeeting„Å´Â§âÊèõ
        const unifiedMeeting = {
          id: `actual_${meetingToDelete.id}`,
          title: meetingToDelete.title,
          description: meetingToDelete.description,
          startTime: new Date(meetingToDelete.startTime),
          endTime: new Date(meetingToDelete.endTime),
          participants: meetingToDelete.participants,
          tags: meetingToDelete.tags,
          type: 'actual' as const,
          status: meetingToDelete.status,
          scheduledMeetingId: undefined,
          actualMeetingId: meetingToDelete.id,
          nestId: meetingToDelete.nestId,
          automation: undefined,
          actualData: {
            uploadedFiles: meetingToDelete.uploadedFiles,
            recordingUrl: meetingToDelete.recordingUrl,
            transcript: meetingToDelete.transcript,
            aiSummary: meetingToDelete.aiSummary,
          },
          createdBy: meetingToDelete.createdBy,
          createdAt: new Date(meetingToDelete.createdAt),
          updatedAt: new Date(meetingToDelete.updatedAt),
        };
        await meetingService.deleteMeeting(unifiedMeeting);
      }
      
      // „Çπ„Éà„É¨„Éº„Ç∏„Åã„Çâ„Ç™„Éº„Éá„Ç£„Ç™„Éï„Ç°„Ç§„É´„ÇíÂâäÈô§
      try {
        await StorageService.deleteMeetingAudioFiles(meetingId);
        console.log('üîß „Çπ„Éà„É¨„Éº„Ç∏„Éï„Ç°„Ç§„É´ÂâäÈô§ÂÆå‰∫Ü');
      } catch (storageError) {
        console.error('üîß „Çπ„Éà„É¨„Éº„Ç∏„Éï„Ç°„Ç§„É´ÂâäÈô§„Ç®„É©„ÉºÔºàÂá¶ÁêÜ„ÅØÁ∂öË°åÔºâ:', storageError);
        // „Çπ„Éà„É¨„Éº„Ç∏ÂâäÈô§„Å´Â§±Êïó„Åó„Å¶„ÇÇ„ÄÅ„Éü„Éº„ÉÜ„Ç£„É≥„Ç∞ÂâäÈô§„ÅØÁ∂öË°å
      }
      
      setSelectedMeeting(null);
      await refreshUnifiedMeetings();
      
      showToast({ 
        title: 'ÂâäÈô§ÂÆå‰∫Ü', 
        message: '„Éü„Éº„ÉÜ„Ç£„É≥„Ç∞„ÄÅ„Ç™„Éº„Éá„Ç£„Ç™„Éï„Ç°„Ç§„É´„ÄÅÈñ¢ÈÄ£„Åô„Çã„Ç´„Éº„Éâ„ÇíÂâäÈô§„Åó„Åæ„Åó„Åü„ÄÇ', 
        type: 'success' 
      });
      
    } catch (error) {
      console.error('üîß „Éü„Éº„ÉÜ„Ç£„É≥„Ç∞ÂâäÈô§„Ç®„É©„Éº:', error);
      alert('„Éü„Éº„ÉÜ„Ç£„É≥„Ç∞„ÅÆÂâäÈô§„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ' + (error instanceof Error ? error.message : '‰∏çÊòé„Å™„Ç®„É©„Éº'));
    }
  }, [selectedUnifiedMeeting, selectedMeeting, refreshUnifiedMeetings, showToast]);

  // üîß ÈáçË§áÂëº„Å≥Âá∫„ÅóÈò≤Ê≠¢„Éï„É©„Ç∞
  const [isCardExtractionInProgress, setIsCardExtractionInProgress] = useState(false);
  const [isAISummaryInProgress, setIsAISummaryInProgress] = useState(false);

  // „Ç´„Éº„ÉâÊäΩÂá∫
  const handleCardExtraction = useCallback(async (extractionSettings?: CardExtractionSettings) => {
    console.log('üîç [handleCardExtraction] Èñ¢Êï∞Âëº„Å≥Âá∫„ÅóÈñãÂßã', {
      timestamp: new Date().toISOString(),
      meetingId: selectedMeeting?.id,
      meetingTitle: selectedMeeting?.title,
      stackTrace: new Error().stack
    });

    // üîß ÈáçË§áÂëº„Å≥Âá∫„ÅóÈò≤Ê≠¢ - Ë§áÊï∞„É¨„Éô„É´„ÅÆ„ÉÅ„Çß„ÉÉ„ÇØ
    if (isCardExtractionInProgress) {
      console.log('üîß [handleCardExtraction] Êó¢„Å´Âá¶ÁêÜ‰∏≠„ÅÆ„Åü„ÇÅ„ÄÅÈáçË§áÂëº„Å≥Âá∫„Åó„Çí„Çπ„Ç≠„ÉÉ„ÉóÔºà„Éï„É©„Ç∞„É¨„Éô„É´Ôºâ');
      showToast({ title: 'ÊÉÖÂ†±', message: '„Ç´„Éº„ÉâÊäΩÂá∫„ÅØÊó¢„Å´Âá¶ÁêÜ‰∏≠„Åß„Åô„ÄÇ', type: 'info' });
      return;
    }

    if (isJobRunning && isJobRunning('card_extraction')) {
      console.log('üîß [handleCardExtraction] Êó¢„Å´Âá¶ÁêÜ‰∏≠„ÅÆ„Åü„ÇÅ„ÄÅÈáçË§áÂëº„Å≥Âá∫„Åó„Çí„Çπ„Ç≠„ÉÉ„ÉóÔºà„Ç∏„Éß„Éñ„É¨„Éô„É´Ôºâ');
      showToast({ title: 'ÊÉÖÂ†±', message: '„Ç´„Éº„ÉâÊäΩÂá∫„ÅØÊó¢„Å´Âá¶ÁêÜ‰∏≠„Åß„Åô„ÄÇ', type: 'info' });
      return;
    }

    // üîß Âá¶ÁêÜÈñãÂßã„Éï„É©„Ç∞„ÇíË®≠ÂÆö
    setIsCardExtractionInProgress(true);

    if (!selectedMeeting || !selectedMeeting.transcript || selectedMeeting.transcript.trim() === '') {
      showToast({ title: '„Ç®„É©„Éº', message: 'ÊñáÂ≠óËµ∑„Åì„Åó„Éï„Ç°„Ç§„É´„Åå„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇ', type: 'error' });
      return;
    }
    
    if (!user?.id) {
      showToast({ title: '„Ç®„É©„Éº', message: '„É¶„Éº„Ç∂„ÉºÊÉÖÂ†±„ÅåÂèñÂæó„Åß„Åç„Åæ„Åõ„Çì„ÄÇ', type: 'error' });
      return;
    }

    try {
      console.log('üîç [handleCardExtraction] createJobÂëº„Å≥Âá∫„ÅóÂâç');
      // üîß Background job„Åß„Ç´„Éº„ÉâÊäΩÂá∫„ÇíÂÆüË°åÔºàÂç≥Â∫ß„Å´„É≠„Éº„Ç´„É´Áä∂ÊÖãÊõ¥Êñ∞„Åï„Çå„ÇãÔºâ
      const job = await createJob(
        'card_extraction',
        selectedMeeting.id,
        {
          nestId: nestId,
          userId: user.id,
          meetingTitle: selectedMeeting.title,
          transcript: selectedMeeting.transcript,
          extractionSettings: extractionSettings
        }
      );
      
      console.log('üîç [handleCardExtraction] createJobÂÆå‰∫Ü', { jobId: job?.id });
      
      if (job) {
        showToast({ title: 'ÊàêÂäü', message: '„Ç´„Éº„ÉâÊäΩÂá∫„ÇíÈñãÂßã„Åó„Åæ„Åó„Åü„ÄÇÂá¶ÁêÜÂÆå‰∫Ü„Åæ„ÅßÂ∞ë„ÄÖ„ÅäÂæÖ„Å°„Åè„Å†„Åï„ÅÑ„ÄÇ', type: 'success' });
      }
      
    } catch (error) {
      console.error('„Ç´„Éº„ÉâÊäΩÂá∫„Ç∏„Éß„Éñ‰ΩúÊàê„Ç®„É©„Éº:', error);
      showToast({ title: '„Ç®„É©„Éº', message: '„Ç´„Éº„ÉâÊäΩÂá∫„ÅÆÈñãÂßã„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ', type: 'error' });
    } finally {
      // üîß Âá¶ÁêÜÂÆå‰∫ÜÂæå„Å´„Éï„É©„Ç∞„Çí„É™„Çª„ÉÉ„Éà
      setIsCardExtractionInProgress(false);
    }
  }, [selectedMeeting, user?.id, nestId, createJob, showToast, isJobRunning]);
  
  // AIË¶ÅÁ¥Ñ
  const handleAISummary = useCallback(async () => {
    // üîß ÈáçË§áÂëº„Å≥Âá∫„ÅóÈò≤Ê≠¢ - Ë§áÊï∞„É¨„Éô„É´„ÅÆ„ÉÅ„Çß„ÉÉ„ÇØ
    if (isAISummaryInProgress) {
      console.log('üîß [handleAISummary] Êó¢„Å´Âá¶ÁêÜ‰∏≠„ÅÆ„Åü„ÇÅ„ÄÅÈáçË§áÂëº„Å≥Âá∫„Åó„Çí„Çπ„Ç≠„ÉÉ„ÉóÔºà„Éï„É©„Ç∞„É¨„Éô„É´Ôºâ');
      showToast({ title: 'ÊÉÖÂ†±', message: 'AIË¶ÅÁ¥Ñ„ÅØÊó¢„Å´Âá¶ÁêÜ‰∏≠„Åß„Åô„ÄÇ', type: 'info' });
      return;
    }

    if (isJobRunning && isJobRunning('ai_summary')) {
      console.log('üîß [handleAISummary] Êó¢„Å´Âá¶ÁêÜ‰∏≠„ÅÆ„Åü„ÇÅ„ÄÅÈáçË§áÂëº„Å≥Âá∫„Åó„Çí„Çπ„Ç≠„ÉÉ„ÉóÔºà„Ç∏„Éß„Éñ„É¨„Éô„É´Ôºâ');
      showToast({ title: 'ÊÉÖÂ†±', message: 'AIË¶ÅÁ¥Ñ„ÅØÊó¢„Å´Âá¶ÁêÜ‰∏≠„Åß„Åô„ÄÇ', type: 'info' });
      return;
    }

    // üîß Âá¶ÁêÜÈñãÂßã„Éï„É©„Ç∞„ÇíË®≠ÂÆö
    setIsAISummaryInProgress(true);

    if (!selectedMeeting || !selectedMeeting.transcript || selectedMeeting.transcript.trim() === '') {
      showToast({ title: '„Ç®„É©„Éº', message: 'ÊñáÂ≠óËµ∑„Åì„Åó„Éï„Ç°„Ç§„É´„Åå„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇ', type: 'error' });
      return;
    }

    if (!user?.id) {
      showToast({ title: '„Ç®„É©„Éº', message: '„É¶„Éº„Ç∂„ÉºÊÉÖÂ†±„ÅåÂèñÂæó„Åß„Åç„Åæ„Åõ„Çì„ÄÇ', type: 'error' });
      return;
    }

    try {
      // üîß Background job„ÅßAIË¶ÅÁ¥Ñ„ÇíÂÆüË°åÔºàÂç≥Â∫ß„Å´„É≠„Éº„Ç´„É´Áä∂ÊÖãÊõ¥Êñ∞„Åï„Çå„ÇãÔºâ
      const job = await createJob(
        'ai_summary',
        selectedMeeting.id,
        {
          nestId: nestId,
          userId: user.id,
          meetingTitle: selectedMeeting.title,
          transcript: selectedMeeting.transcript
        }
      );
      
      if (job) {
        showToast({ title: 'ÊàêÂäü', message: 'AIË¶ÅÁ¥Ñ„ÇíÈñãÂßã„Åó„Åæ„Åó„Åü„ÄÇÂá¶ÁêÜÂÆå‰∫Ü„Åæ„ÅßÂ∞ë„ÄÖ„ÅäÂæÖ„Å°„Åè„Å†„Åï„ÅÑ„ÄÇ', type: 'success' });
      }
      
    } catch (error) {
      console.error('AIË¶ÅÁ¥Ñ„Ç∏„Éß„Éñ‰ΩúÊàê„Ç®„É©„Éº:', error);
      showToast({ title: '„Ç®„É©„Éº', message: 'AIË¶ÅÁ¥Ñ„ÅÆÈñãÂßã„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ', type: 'error' });
    } finally {
      // üîß Âá¶ÁêÜÂÆå‰∫ÜÂæå„Å´„Éï„É©„Ç∞„Çí„É™„Çª„ÉÉ„Éà
      setIsAISummaryInProgress(false);
    }
  }, [selectedMeeting, user?.id, nestId, createJob, showToast, isJobRunning]);
  
  // „Éï„Ç°„Ç§„É´„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÂá¶ÁêÜ
  const handleFileUpload = useCallback(async (file: File) => {
    if (!selectedMeeting || !user?.id) {
      console.error('üîß selectedMeeting„Åæ„Åü„ÅØuser„Åå‰∏çÊ≠£:', { selectedMeeting: !!selectedMeeting, user: !!user?.id });
      return;
    }
    
    try {
      // „Éï„Ç°„Ç§„É´„Çµ„Ç§„Ç∫„Çí„ÉÅ„Çß„ÉÉ„ÇØÔºà200MBÂà∂ÈôêÔºâ
      const maxSizeBytes = 200 * 1024 * 1024; // 200MB
      console.log('üîß „Éï„Ç°„Ç§„É´„Çµ„Ç§„Ç∫„ÉÅ„Çß„ÉÉ„ÇØ:', { size: file.size, maxSize: maxSizeBytes });
      
      if (file.size > maxSizeBytes) {
        console.error('üîß „Éï„Ç°„Ç§„É´„Çµ„Ç§„Ç∫Ë∂ÖÈÅé');
        showToast({ 
          title: '„Ç®„É©„Éº', 
          message: `„Éï„Ç°„Ç§„É´„Çµ„Ç§„Ç∫„ÅåÂ§ß„Åç„Åô„Åé„Åæ„Åô„ÄÇ200MB‰ª•‰∏ã„ÅÆ„Éï„Ç°„Ç§„É´„Çí„ÅîÂà©Áî®„Åè„Å†„Åï„ÅÑ„ÄÇÔºàÁèæÂú®: ${Math.round(file.size / (1024 * 1024))}MBÔºâ`, 
          type: 'error' 
        });
        return;
      }
      
      // „Éï„Ç°„Ç§„É´„Çø„Ç§„Éó„Å´„Çà„Å£„Å¶Âá¶ÁêÜ„ÇíÂàÜÂ≤ê
      const isAudio = file.type.startsWith('audio/');
      const isVideo = file.type.startsWith('video/');
      const isText = file.type === 'text/plain';
      
      console.log('üîß „Éï„Ç°„Ç§„É´„Çø„Ç§„ÉóÂà§ÂÆö:', { isAudio, isVideo, isText, fileType: file.type });
      
      if (isText) {
        // „ÉÜ„Ç≠„Çπ„Éà„Éï„Ç°„Ç§„É´„ÅÆÂ†¥ÂêàÔºöÂæìÊù•„ÅÆÂá¶ÁêÜ
        const text = await file.text();
        
        // Áõ¥Êé•Supabase„Å´‰øùÂ≠ò
        const { error } = await supabase
          .from('meetings')
          .update({
            transcript: text,
            updated_at: new Date().toISOString(),
          })
          .eq('id', selectedMeeting.id);
        
        if (error) {
          console.error('„Éï„Ç°„Ç§„É´„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ‰øùÂ≠ò„Ç®„É©„Éº:', error);
          showToast({ title: '„Ç®„É©„Éº', message: '„Éï„Ç°„Ç§„É´„ÅÆ‰øùÂ≠ò„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ', type: 'error' });
          return;
        }
        
        // selectedMeeting„ÇíÊõ¥Êñ∞
        setSelectedMeeting(prev => prev ? { ...prev, transcript: text } : null);
        showToast({ title: 'ÊàêÂäü', message: '„ÉÜ„Ç≠„Çπ„Éà„Éï„Ç°„Ç§„É´„Çí„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Åó„Åæ„Åó„Åü„ÄÇ', type: 'success' });
        
      } else       if (isAudio || isVideo) {
        // Èü≥Â£∞„ÉªÂãïÁîª„Éï„Ç°„Ç§„É´„ÅÆÂ†¥ÂêàÔºöÊñ∞„Åó„ÅÑ„Ç¢„Éº„Ç≠„ÉÜ„ÇØ„ÉÅ„É£„ÅßÂá¶ÁêÜ
        console.log('üîß Èü≥Â£∞„ÉªÂãïÁîª„Éï„Ç°„Ç§„É´Âá¶ÁêÜÈñãÂßãÔºàÊñ∞„Åó„ÅÑ„Ç¢„Éº„Ç≠„ÉÜ„ÇØ„ÉÅ„É£Ôºâ');
        
        try {
          console.log('üîß [DEBUG] TranscriptionServiceV2Âá¶ÁêÜÈñãÂßã');
          console.log('üîß [DEBUG] „Éï„Ç°„Ç§„É´ÊÉÖÂ†±:', {
            name: file.name,
            type: file.type,
            size: file.size,
            sizeMB: (file.size / 1024 / 1024).toFixed(2)
          });
          
          console.log('üîß [DEBUG] TranscriptionServiceV2„Ç§„É≥„Éù„Éº„ÉàÈñãÂßã');
          const { TranscriptionServiceV2 } = await import('../../../../services/TranscriptionServiceV2');
          console.log('üîß [DEBUG] TranscriptionServiceV2„Ç§„É≥„Éù„Éº„ÉàÂÆå‰∫Ü');
          
          console.log('üîß [DEBUG] TranscriptionServiceV2Âëº„Å≥Âá∫„ÅóÊ∫ñÂÇô:', {
            fileName: file.name,
            fileType: file.type,
            fileSize: file.size,
            meetingId: selectedMeeting.id,
            nestId: nestId
          });
          
          console.log('üîß [DEBUG] TranscriptionServiceV2.transcribeAudioÂëº„Å≥Âá∫„ÅóÈñãÂßã');
          const result = await TranscriptionServiceV2.transcribeAudio(
            file,
            selectedMeeting.id,
            nestId
          );
          
          console.log('üîß [DEBUG] TranscriptionServiceV2ÁµêÊûú:', result);
          
          if (result.success) {
            console.log('üîß [DEBUG] ÊñáÂ≠óËµ∑„Åì„Åó„Ç∏„Éß„ÉñÈñãÂßãÊàêÂäü:', result.jobId);
            showToast({ 
              title: 'ÊàêÂäü', 
              message: 'ÊñáÂ≠óËµ∑„Åì„Åó„Ç∏„Éß„Éñ„ÇíÈñãÂßã„Åó„Åæ„Åó„Åü„ÄÇÂá¶ÁêÜÂÆå‰∫Ü„Åæ„Åß„ÅäÂæÖ„Å°„Åè„Å†„Åï„ÅÑ„ÄÇ', 
              type: 'success' 
            });
            
            // „Éü„Éº„ÉÜ„Ç£„É≥„Ç∞‰∏ÄË¶ß„ÇíÊõ¥Êñ∞
            await refreshUnifiedMeetings();
          } else {
            console.error('üîß [DEBUG] ÊñáÂ≠óËµ∑„Åì„Åó„Ç∏„Éß„ÉñÈñãÂßã„Ç®„É©„Éº:', result.error);
            showToast({ 
              title: '„Ç®„É©„Éº', 
              message: `ÊñáÂ≠óËµ∑„Åì„ÅóÂá¶ÁêÜ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ${result.error}`, 
              type: 'error' 
            });
          }
          
        } catch (error) {
          console.error('üîß [DEBUG] TranscriptionServiceV2Âá¶ÁêÜ„Ç®„É©„Éº:', error);
          showToast({ 
            title: '„Ç®„É©„Éº', 
            message: `ÊñáÂ≠óËµ∑„Åì„ÅóÂá¶ÁêÜ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ${error instanceof Error ? error.message : 'Unknown error'}`, 
            type: 'error' 
          });
        }
        
      } else {
        showToast({ title: '„Ç®„É©„Éº', message: '„Çµ„Éù„Éº„Éà„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑ„Éï„Ç°„Ç§„É´ÂΩ¢Âºè„Åß„Åô„ÄÇ', type: 'error' });
      }
      
    } catch (error) {
      console.error('„Éï„Ç°„Ç§„É´„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Ç®„É©„Éº:', error);
      showToast({ title: '„Ç®„É©„Éº', message: '„Éï„Ç°„Ç§„É´„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ', type: 'error' });
    }
  }, [selectedMeeting, user?.id, nestId, createJob, showToast]);
  
  // „Éü„Éº„ÉÜ„Ç£„É≥„Ç∞Ë©≥Á¥∞„ÅÆ„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ
  const handleUpload = async (data: any) => {
    // TODO: ÂÆüÈöõ„ÅÆ„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÂá¶ÁêÜ„ÇíÂÆüË£Ö
    setUploadResult('„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÊàêÂäü');
  };
  
  // „Éü„Éº„ÉÜ„Ç£„É≥„Ç∞Ë©≥Á¥∞„ÅÆÁµêÊûúÊèèÁîª
  const handleExtractInsight = async () => {
    // TODO: ÂÆüÈöõ„ÅÆÁµêÊûúÊèèÁîªÂá¶ÁêÜ„ÇíÂÆüË£Ö
    setExtracting(true);
    // ‰ªÆ„ÅÆÁµêÊûú„ÇíË®≠ÂÆö
    setSummary('„Åì„Çå„ÅØË¶ÅÁ¥Ñ„Åß„Åô');
    setExtracting(false);
  };
  

    
  
  // „É¨„Ç§„Ç¢„Ç¶„Éà„ÅÆ„É¨„É≥„ÉÄ„É™„É≥„Ç∞Ôºà„Éá„Çπ„ÇØ„Éà„ÉÉ„Éó„ÄÅ„Çø„Éñ„É¨„ÉÉ„Éà„ÄÅ„É¢„Éê„Ç§„É´„ÅßÂàÜÂ≤êÔºâ
  const renderLayout = () => {
    // „Éá„Çπ„ÇØ„Éà„ÉÉ„Éó„É¨„Ç§„Ç¢„Ç¶„ÉàÔºàÂàÜÂâ≤„Éì„É•„ÉºÔºâ
    if (isDesktop) {
      return (
        <div style={{ height: '100vh', overflow: 'hidden', display: 'flex', flexDirection: 'column' }}>
          <div style={{ flex: 1, display: 'flex', flexDirection: 'row', overflow: 'hidden' }}>
            {/* Â∑¶„Ç´„É©„É†Ôºö„Éü„Éº„ÉÜ„Ç£„É≥„Ç∞„É™„Çπ„Éà„Å´Êñ∞Ë¶èËøΩÂä† */}
            <div style={{ 
              width: 260, 
              padding: 16, 
              background: '#1a1a2e', 
              borderRight: '1px solid #45475a', 
              height: '100%',
              display: 'flex',
              flexDirection: 'column',
              position: 'relative'
            }}>
              <style>{`
                .meeting-list-scroll {
                  scrollbar-width: thin;
                  scrollbar-color: #333366 #1a1a2e;
                }
                .meeting-list-scroll::-webkit-scrollbar {
                  width: 6px;
                }
                .meeting-list-scroll::-webkit-scrollbar-track {
                  background: #1a1a2e;
                }
                .meeting-list-scroll::-webkit-scrollbar-thumb {
                  background: #333366;
                  border-radius: 3px;
                }
                .meeting-list-scroll::-webkit-scrollbar-thumb:hover {
                  background: #45475a;
                }
              `}</style>
              {/* Âõ∫ÂÆö„Éò„ÉÉ„ÉÄ„ÉºÈÉ®ÂàÜ */}
              <div style={{ flexShrink: 0 }}>
                <button
                  style={{
                    marginTop: 8,
                    marginBottom: 16,
                    width: '100%',
                    height: 36,
                    background: '#00ff88',
                    borderRadius: 2,
                    border: 'none',
                    alignItems: 'center',
                    justifyContent: 'center',
                    display: 'flex',
                    flexDirection: 'row',
                    gap: 6,
                    fontWeight: 600,
                    fontSize: 13,
                    color: '#0f0f23',
                    cursor: 'pointer',
                    transition: 'all 0.2s',
                  }}
                  onClick={() => {
                    setDroppedFile(null);
                    setShowForm(true);
                  }}
                  disabled={false}
                >
                  <span style={{ marginRight: 6 }}><Icon name="plus" size={16} color="#0f0f23" /></span>
                  Êñ∞Ë¶è„Éü„Éº„ÉÜ„Ç£„É≥„Ç∞
                </button>

                {/* ‰∫àÁ¥Ñ„Éü„Éº„ÉÜ„Ç£„É≥„Ç∞‰ΩúÊàê */}
                <div style={{ display: 'flex', gap: 8, marginBottom: 8 }}>
                  <button
                    onClick={() => setShowScheduledForm(true)}
                    style={{
                      flex: 1,
                      fontSize: 10,
                      padding: '6px 8px',
                      backgroundColor: '#8b5cf6',
                      color: '#ffffff',
                      border: 'none',
                      borderRadius: 4,
                      cursor: 'pointer',
                      fontWeight: 500,
                    }}
                  >
                    ü§ñ ‰∫àÁ¥Ñ‰ΩúÊàê
                  </button>
                </div>
                
                {/* „Éï„Ç°„Ç§„É´„Éâ„É≠„ÉÉ„Éó„Çæ„Éº„É≥ */}
                <div
                  style={{
                    marginBottom: 16,
                    width: '100%',
                    height: 64,
                    background: isDragOver ? '#2a2a4a' : '#232345',
                    border: isDragOver ? '2px dashed #00ff88' : '1px dashed #45475a',
                    borderRadius: 4,
                    display: 'flex',
                    flexDirection: 'column',
                    alignItems: 'center',
                    justifyContent: 'center',
                    cursor: 'pointer',
                    transition: 'all 0.2s ease',
                    position: 'relative',
                  }}
                  onDragOver={handleDragOver}
                  onDragLeave={handleDragLeave}
                  onDrop={handleFileDrop}
                  onClick={() => {
                    // „Éï„Ç°„Ç§„É´ÈÅ∏Êäû„ÉÄ„Ç§„Ç¢„É≠„Ç∞„ÇíÈñã„Åè
                    const input = document.createElement('input');
                    input.type = 'file';
                    input.accept = '.txt,.mp4,.webm,.mov,.mp3,.wav,.m4a,.pdf';
                    input.onchange = (e) => {
                      const file = (e.target as HTMLInputElement).files?.[0];
                      if (file) {
                        // ÈÅ∏Êäû„Åï„Çå„Åü„Éü„Éº„ÉÜ„Ç£„É≥„Ç∞„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅØÁõ¥Êé•„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÂá¶ÁêÜ„ÇíÂÆüË°å
                        if (selectedMeeting) {
                          handleFileUpload(file);
                        } else {
                          // „Éü„Éº„ÉÜ„Ç£„É≥„Ç∞„ÅåÈÅ∏Êäû„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑÂ†¥Âêà„ÅØ„Éï„Ç©„Éº„É†„ÇíË°®Á§∫
                          setDroppedFile(file);
                          setShowForm(true);
                        }
                      }
                    };
                    input.click();
                  }}
                >
                  <div style={{
                    fontSize: isDragOver ? 20 : 16,
                    marginBottom: 2,
                    transition: 'font-size 0.2s'
                  }}>
                    üìé
                  </div>
                  <div style={{
                    fontSize: 11,
                    fontWeight: 600,
                    color: isDragOver ? '#00ff88' : '#a6adc8',
                    textAlign: 'center',
                    lineHeight: 1.2,
                    letterSpacing: 0.5,
                  }}>
                    {isDragOver ? '„Éï„Ç°„Ç§„É´„Çí„Éâ„É≠„ÉÉ„Éó' : '„Éï„Ç°„Ç§„É´„Çí„Éâ„É≠„ÉÉ„Éó„Åæ„Åü„ÅØ„ÇØ„É™„ÉÉ„ÇØ'}
                  </div>
                  <div style={{
                    fontSize: 9,
                    color: '#6c7086',
                    textAlign: 'center',
                    marginTop: 2,
                  }}>
                    „ÉÜ„Ç≠„Çπ„Éà„ÉªÂãïÁîª„ÉªÈü≥Â£∞„ÉªPDF
                  </div>
                </div>
                
                <div style={{ marginBottom: 16 }}>
                  <Input
                    value={searchQuery}
                    onChange={e => setSearchQuery(e.target.value)}
                    placeholder="„Éü„Éº„ÉÜ„Ç£„É≥„Ç∞„ÇíÊ§úÁ¥¢..."
                  />
                </div>
              </div>
              
              {/* „Çπ„ÇØ„É≠„Éº„É´ÂèØËÉΩ„Å™„É™„Çπ„ÉàÈÉ®ÂàÜ */}
              <div style={{ flex: 1, minHeight: 0 }}>
                <UnifiedMeetingList
                  meetings={unifiedMeetings}
                  selectedMeeting={selectedUnifiedMeeting}
                  onSelectMeeting={handleSelectUnifiedMeeting}
                  onMigrateToActual={handleMigrateToActual}
                  isLoading={loadingUnifiedMeetings}
                  searchQuery={searchQuery}
                  onSearchChange={setSearchQuery}
                  users={users}
                />
              </div>
            </div>
            {/* Âè≥„Ç´„É©„É†Ôºö„Éü„Éº„ÉÜ„Ç£„É≥„Ç∞Ë©≥Á¥∞ */}
            <div style={{ flex: 1, minWidth: 0, background: '#0f0f23', display: 'flex', flexDirection: 'column' }}>
              {selectedUnifiedMeeting?.type === 'actual' && selectedMeeting ? (
                <MeetingDetailPanel
                  key={`meeting-detail-${selectedMeeting.id}`}
                  meeting={selectedMeeting}
                  activeTab={activeTab}
                  onTabChange={setActiveTab}
                  onSaveMeeting={handleUpdateMeeting}
                  onMeetingUpdate={(updatedMeeting) => {
                    // ÈÅ∏Êäû‰∏≠„ÅÆ„Éü„Éº„ÉÜ„Ç£„É≥„Ç∞„ÇÇÊõ¥Êñ∞
                    if (selectedMeeting?.id === updatedMeeting.id) {
                      setSelectedMeeting(updatedMeeting);
                    }
                    // unifiedMeetings„ÅÆÊõ¥Êñ∞„ÅØ useUnifiedMeetings hookÂÜÖ„ÅßËá™ÂãïÁöÑ„Å´Ë°å„Çè„Çå„Çã
                    refreshUnifiedMeetings();
                  }}
                  onAISummary={handleAISummary}
                  onCardExtraction={handleCardExtraction}
                  onFileUpload={handleFileUpload}
                  isCardExtractionDisabled={!selectedMeeting?.transcript || selectedMeeting.transcript.trim() === ''}
                  isAISummaryDisabled={!selectedMeeting?.transcript || selectedMeeting.transcript.trim() === ''}
                  isCreatingJob={currentRunningJob as JobType | null}
                  isJobRunning={isJobRunning}
                  onDeleteMeeting={handleDeleteMeeting}
                />
              ) : selectedUnifiedMeeting?.type === 'scheduled' ? (
                // ‰∫àÁ¥Ñ„Éü„Éº„ÉÜ„Ç£„É≥„Ç∞„ÅÆË©≥Á¥∞Ë°®Á§∫
                <div style={{ 
                  padding: 24, 
                  color: '#e2e8f0',
                  display: 'flex',
                  flexDirection: 'column',
                  alignItems: 'center',
                  justifyContent: 'center',
                  height: '100%',
                }}>
                  <div style={{ textAlign: 'center', maxWidth: 400 }}>
                    <h3 style={{ marginBottom: 16, color: '#2196f3' }}>üìÖ ‰∫àÁ¥Ñ„Éü„Éº„ÉÜ„Ç£„É≥„Ç∞</h3>
                    <p style={{ color: '#a6adc8', marginBottom: 8, fontSize: 18, fontWeight: 600 }}>
                      {selectedUnifiedMeeting.title}
                    </p>
                    <p style={{ color: '#64b5f6', marginBottom: 24, fontSize: 14 }}>
                      ÈñãÂßã‰∫àÂÆö: {selectedUnifiedMeeting.startTime.toLocaleString('ja-JP')}
                    </p>
                    
                    {selectedUnifiedMeeting.automation && (
                      <div style={{ marginBottom: 24 }}>
                        <h4 style={{ marginBottom: 12, color: '#f9e2af' }}>ü§ñ Ëá™ÂãïÂåñË®≠ÂÆö</h4>
                        <div style={{ display: 'flex', flexWrap: 'wrap', gap: 8, justifyContent: 'center' }}>
                          {selectedUnifiedMeeting.automation.autoJoin && (
                            <span style={{ 
                              fontSize: 12, 
                              backgroundColor: '#8b5cf6', 
                              color: '#ffffff',
                              padding: '4px 8px',
                              borderRadius: 4,
                            }}>
                              Ëá™ÂãïÂèÇÂä†
                            </span>
                          )}
                          {selectedUnifiedMeeting.automation.autoTranscribe && (
                            <span style={{ 
                              fontSize: 12, 
                              backgroundColor: '#8b5cf6', 
                              color: '#ffffff',
                              padding: '4px 8px',
                              borderRadius: 4,
                            }}>
                              Ëá™ÂãïËª¢ÂÜô
                            </span>
                          )}
                          {selectedUnifiedMeeting.automation.autoSummarize && (
                            <span style={{ 
                              fontSize: 12, 
                              backgroundColor: '#8b5cf6', 
                              color: '#ffffff',
                              padding: '4px 8px',
                              borderRadius: 4,
                            }}>
                              Ëá™ÂãïË¶ÅÁ¥Ñ
                            </span>
                          )}
                          {selectedUnifiedMeeting.automation.autoExtractCards && (
                            <span style={{ 
                              fontSize: 12, 
                              backgroundColor: '#8b5cf6', 
                              color: '#ffffff',
                              padding: '4px 8px',
                              borderRadius: 4,
                            }}>
                              Ëá™ÂãïÊäΩÂá∫
                            </span>
                          )}
                        </div>
                      </div>
                    )}

                    {selectedUnifiedMeeting.status === 'scheduled' && 
                     !selectedUnifiedMeeting.actualMeetingId && (
                      <button
                        onClick={() => handleMigrateToActual(selectedUnifiedMeeting.scheduledMeetingId!)}
                        style={{
                          padding: '12px 24px',
                          backgroundColor: '#00ff88',
                          color: '#0f0f23',
                          border: 'none',
                          borderRadius: 4,
                          fontSize: 14,
                          fontWeight: 600,
                          cursor: 'pointer',
                          marginBottom: 16,
                        }}
                      >
                        ‚ñ∂ „Éü„Éº„ÉÜ„Ç£„É≥„Ç∞„ÇíÈñãÂßã
                      </button>
                    )}
                    
                    <p style={{ color: '#6c7086', fontSize: 12, textAlign: 'center' }}>
                      „Åì„ÅÆ„Éú„Çø„É≥„Çí„ÇØ„É™„ÉÉ„ÇØ„Åô„Çã„Å®„ÄÅ‰∫àÁ¥Ñ„Éü„Éº„ÉÜ„Ç£„É≥„Ç∞„ÅåÂÆüÈöõ„ÅÆ„Éü„Éº„ÉÜ„Ç£„É≥„Ç∞„Å´Â§âÊèõ„Åï„Çå„Åæ„Åô„ÄÇ
                    </p>
                  </div>
                </div>
              ) : (
                // ‰Ωï„ÇÇÈÅ∏Êäû„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑÂ†¥Âêà
                <div style={{ 
                  padding: 24, 
                  color: '#e2e8f0',
                  display: 'flex',
                  flexDirection: 'column',
                  alignItems: 'center',
                  justifyContent: 'center',
                  height: '100%',
                }}>
                  <div style={{ textAlign: 'center', maxWidth: 400 }}>
                    <h3 style={{ marginBottom: 16, color: '#2196f3' }}>„Éü„Éº„ÉÜ„Ç£„É≥„Ç∞„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ</h3>
                    <p style={{ color: '#a6adc8', marginBottom: 8, fontSize: 16 }}>
                      Â∑¶ÂÅ¥„ÅÆ„É™„Çπ„Éà„Åã„Çâ„Éü„Éº„ÉÜ„Ç£„É≥„Ç∞„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ
                    </p>
                    <p style={{ color: '#6c7086', fontSize: 12, textAlign: 'center' }}>
                      ‰∫àÁ¥Ñ„Éü„Éº„ÉÜ„Ç£„É≥„Ç∞„Å®ÂÆüÈöõ„ÅÆ„Éü„Éº„ÉÜ„Ç£„É≥„Ç∞„Çí<br/>
                      ‰∏Ä„Å§„ÅÆ„É™„Çπ„Éà„ÅßÁÆ°ÁêÜ„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ
                    </p>
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      );
    }
    
    // „Çø„Éñ„É¨„ÉÉ„Éà/„É¢„Éê„Ç§„É´„É¨„Ç§„Ç¢„Ç¶„ÉàÔºàÂÖ®ÁîªÈù¢Ë°®Á§∫Ôºâ
    return (
      <div style={{ height: '100vh', overflow: 'hidden', display: 'flex', flexDirection: 'column' }}>
        <div style={{ flex: 1, display: 'flex', flexDirection: 'column', overflow: 'hidden' }}>
          {/* „Éò„ÉÉ„ÉÄ„ÉºÈÉ®ÂàÜ */}
          <div style={{ 
            padding: 16, 
            background: '#1a1a2e', 
            borderBottom: '1px solid #45475a',
            display: 'flex',
            flexDirection: 'column',
            gap: 12
          }}>
            <div style={{ display: 'flex', gap: 8, alignItems: 'center' }}>
              <button
                style={{
                  height: 36,
                  background: '#00ff88',
                  borderRadius: 2,
                  border: 'none',
                  padding: '0 16px',
                  fontWeight: 600,
                  fontSize: 13,
                  color: '#0f0f23',
                  cursor: 'pointer',
                  transition: 'all 0.2s',
                }}
                onClick={() => {
                  setDroppedFile(null);
                  setShowForm(true);
                }}
              >
                <span style={{ marginRight: 6 }}><Icon name="plus" size={16} color="#0f0f23" /></span>
                Êñ∞Ë¶è„Éü„Éº„ÉÜ„Ç£„É≥„Ç∞
              </button>
              
              <button
                onClick={() => setShowScheduledForm(true)}
                style={{
                  fontSize: 10,
                  padding: '6px 8px',
                  backgroundColor: '#8b5cf6',
                  color: '#ffffff',
                  border: 'none',
                  borderRadius: 4,
                  cursor: 'pointer',
                  fontWeight: 500,
                }}
              >
                ü§ñ ‰∫àÁ¥Ñ‰ΩúÊàê
              </button>
            </div>
            
            {/* „Éï„Ç°„Ç§„É´„Éâ„É≠„ÉÉ„Éó„Çæ„Éº„É≥ */}
            <div
              style={{
                width: '100%',
                height: 64,
                background: isDragOver ? '#2a2a4a' : '#232345',
                border: isDragOver ? '2px dashed #00ff88' : '1px dashed #45475a',
                borderRadius: 4,
                display: 'flex',
                flexDirection: 'column',
                alignItems: 'center',
                justifyContent: 'center',
                cursor: 'pointer',
                transition: 'all 0.2s ease',
                position: 'relative',
              }}
              onDragOver={handleDragOver}
              onDragLeave={handleDragLeave}
              onDrop={handleFileDrop}
              onClick={() => {
                const input = document.createElement('input');
                input.type = 'file';
                input.accept = '.txt,.mp4,.webm,.mov,.mp3,.wav,.m4a,.pdf';
                input.onchange = (e) => {
                  const file = (e.target as HTMLInputElement).files?.[0];
                  if (file) {
                    if (selectedMeeting) {
                      handleFileUpload(file);
                    } else {
                      setDroppedFile(file);
                      setShowForm(true);
                    }
                  }
                };
                input.click();
              }}
            >
              <div style={{
                fontSize: isDragOver ? 20 : 16,
                marginBottom: 2,
                transition: 'font-size 0.2s'
              }}>
                üìé
              </div>
              <div style={{
                fontSize: 11,
                fontWeight: 600,
                color: isDragOver ? '#00ff88' : '#a6adc8',
                textAlign: 'center',
                lineHeight: 1.2,
                letterSpacing: 0.5,
              }}>
                {isDragOver ? '„Éï„Ç°„Ç§„É´„Çí„Éâ„É≠„ÉÉ„Éó' : '„Éï„Ç°„Ç§„É´„Çí„Éâ„É≠„ÉÉ„Éó„Åæ„Åü„ÅØ„ÇØ„É™„ÉÉ„ÇØ'}
              </div>
              <div style={{
                fontSize: 9,
                color: '#6c7086',
                textAlign: 'center',
                marginTop: 2,
              }}>
                „ÉÜ„Ç≠„Çπ„Éà„ÉªÂãïÁîª„ÉªÈü≥Â£∞„ÉªPDF
              </div>
            </div>
            
            <div>
              <Input
                value={searchQuery}
                onChange={e => setSearchQuery(e.target.value)}
                placeholder="„Éü„Éº„ÉÜ„Ç£„É≥„Ç∞„ÇíÊ§úÁ¥¢..."
              />
            </div>
          </div>
          
          {/* „É°„Ç§„É≥„Ç≥„É≥„ÉÜ„É≥„ÉÑ */}
          <div style={{ flex: 1, display: 'flex', flexDirection: 'row', overflow: 'hidden' }}>
            {/* Â∑¶„Ç´„É©„É†Ôºö„Éü„Éº„ÉÜ„Ç£„É≥„Ç∞„É™„Çπ„Éà */}
            <div style={{ 
              width: 260, 
              background: '#1a1a2e', 
              borderRight: '1px solid #45475a', 
              height: '100%',
              display: 'flex',
              flexDirection: 'column',
            }}>
              <div style={{ flex: 1, minHeight: 0 }}>
                <UnifiedMeetingList
                  meetings={unifiedMeetings}
                  selectedMeeting={selectedUnifiedMeeting}
                  onSelectMeeting={handleSelectUnifiedMeeting}
                  onMigrateToActual={handleMigrateToActual}
                  isLoading={loadingUnifiedMeetings}
                  searchQuery={searchQuery}
                  onSearchChange={setSearchQuery}
                  users={users}
                />
              </div>
            </div>
            
            {/* Âè≥„Ç´„É©„É†Ôºö„Éü„Éº„ÉÜ„Ç£„É≥„Ç∞Ë©≥Á¥∞ - ÈáçË§á„ÇíÈÅø„Åë„Çã„Åü„ÇÅÂâäÈô§ */}
            <div style={{ flex: 1, minWidth: 0, background: '#0f0f23', display: 'flex', flexDirection: 'column' }}>
              {/* üîß ÈáçË§á„É¨„É≥„ÉÄ„É™„É≥„Ç∞„ÇíÈÅø„Åë„Çã„Åü„ÇÅ„ÄÅ„Åì„ÅÆÈÉ®ÂàÜ„ÅØÂâäÈô§ */}
              <div style={{ 
                padding: 24, 
                color: '#e2e8f0',
                display: 'flex',
                flexDirection: 'column',
                alignItems: 'center',
                justifyContent: 'center',
                height: '100%',
              }}>
                <div style={{ textAlign: 'center', maxWidth: 400 }}>
                  <h3 style={{ marginBottom: 16, color: '#a6adc8' }}>üìã „Éü„Éº„ÉÜ„Ç£„É≥„Ç∞Ë©≥Á¥∞</h3>
                  <p style={{ color: '#8b5cf6', fontSize: 16 }}>
                    Â∑¶ÂÅ¥„ÅÆ„É™„Çπ„Éà„Åã„Çâ„Éü„Éº„ÉÜ„Ç£„É≥„Ç∞„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ
                  </p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  };
  
  // „Éü„Éº„ÉÜ„Ç£„É≥„Ç∞Á©∫Èñì„Åå„Å™„Åë„Çå„Å∞‰ΩúÊàê„Éú„Çø„É≥„ÇíË°®Á§∫
  if (checkingSpace) {
    return (
      <SafeAreaView style={styles.loadingContainer}>
        <ActivityIndicator size="large" color="#4a6da7" />
        <Text style={styles.loadingText}>„Éü„Éº„ÉÜ„Ç£„É≥„Ç∞Á©∫Èñì„ÇíÁ¢∫Ë™ç‰∏≠...</Text>
      </SafeAreaView>
    );
  }
  if (!meetingSpace) {
    return (
      <SafeAreaView style={styles.container}>
        <View style={styles.emptyStateContainer}>
          <Text style={styles.emptyStateText}>„Éü„Éº„ÉÜ„Ç£„É≥„Ç∞Á©∫Èñì„Åå„Åæ„Å†‰ΩúÊàê„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇ</Text>
          <TouchableOpacity style={styles.createButton} onPress={handleCreateMeetingSpace} disabled={creatingSpace}>
            <Text style={styles.createButtonText}>{creatingSpace ? '‰ΩúÊàê‰∏≠...' : '„Éü„Éº„ÉÜ„Ç£„É≥„Ç∞Á©∫Èñì„Çí‰ΩúÊàê'}</Text>
          </TouchableOpacity>
        </View>
      </SafeAreaView>
    );
  }
  
  return (
    <div style={{ height: '100vh', overflow: 'hidden' }}>
      {renderLayout()}
      {showForm && (
        <div style={{
          position: 'fixed',
          inset: 0,
          zIndex: 9999,
          background: 'rgba(15,18,34,0.85)',
          display: 'flex',
          alignItems: 'stretch',
          justifyContent: 'flex-end',
          fontFamily: 'inherit',
        }}>
          <div style={{
            width: 700,
            maxWidth: '95vw',
            height: '100%',
            background: '#232345',
            borderLeft: '1px solid #39396a',
            borderRadius: '4px 0 0 4px',
            boxShadow: '0 4px 24px rgba(0,0,0,0.18)',
            display: 'flex',
            flexDirection: 'column',
            padding: '0',
            position: 'relative',
          }}>
            {/* „Éò„ÉÉ„ÉÄ„Éº */}
            <div style={{
              background: '#39396a',
              padding: '18px 24px 12px 24px',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'space-between',
              minHeight: 48,
            }}>
              <span style={{ fontSize: 16, fontWeight: 700, color: '#fff', letterSpacing: 1 }}>Êñ∞„Åó„ÅÑ„Éü„Éº„ÉÜ„Ç£„É≥„Ç∞„Çí‰ΩúÊàê</span>
              <button onClick={() => setShowForm(false)} style={{ background: 'none', border: 'none', color: '#fff', fontSize: 22, cursor: 'pointer', marginLeft: 12, lineHeight: 1, borderRadius: 2, padding: 4, transition: 'background 0.2s' }} aria-label="Èñâ„Åò„Çã" title="Èñâ„Åò„Çã">√ó</button>
            </div>
            {/* Êú¨‰Ωì */}
            <div style={{ flex: 1, overflowY: 'auto', padding: '24px 24px 24px 24px' }}>
              <MeetingForm 
                onSubmit={handleCreateMeeting} 
                onCancel={() => {
                  setShowForm(false);
                  setDroppedFile(null);
                }}
                droppedFile={droppedFile}
              />
            </div>
          </div>
        </div>
      )}

      {/* ‰∫àÁ¥Ñ„Éü„Éº„ÉÜ„Ç£„É≥„Ç∞‰ΩúÊàê„Éï„Ç©„Éº„É† */}
      {showScheduledForm && (
        <div style={{
          position: 'fixed',
          inset: 0,
          zIndex: 9999,
          background: 'rgba(15,18,34,0.85)',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          fontFamily: 'inherit',
        }}>
          <div style={{
            width: 500,
            maxWidth: '95vw',
            maxHeight: '90vh',
            background: '#232345',
            border: '1px solid #39396a',
            borderRadius: 8,
            boxShadow: '0 4px 24px rgba(0,0,0,0.18)',
            display: 'flex',
            flexDirection: 'column',
            overflow: 'hidden',
          }}>
            {/* „Éò„ÉÉ„ÉÄ„Éº */}
            <div style={{
              background: '#39396a',
              padding: '18px 24px 12px 24px',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'space-between',
              minHeight: 48,
            }}>
              <span style={{ 
                fontSize: 16, 
                fontWeight: 700, 
                color: '#fff', 
                letterSpacing: 1,
                display: 'flex',
                alignItems: 'center',
                gap: 8,
              }}>
                ü§ñ ‰∫àÁ¥Ñ„Éü„Éº„ÉÜ„Ç£„É≥„Ç∞‰ΩúÊàê
              </span>
              <button 
                onClick={() => setShowScheduledForm(false)} 
                style={{ 
                  background: 'none', 
                  border: 'none', 
                  color: '#fff', 
                  fontSize: 22, 
                  cursor: 'pointer', 
                  lineHeight: 1, 
                  borderRadius: 2, 
                  padding: 4,
                }} 
                aria-label="Èñâ„Åò„Çã" 
                title="Èñâ„Åò„Çã"
              >
                √ó
              </button>
            </div>
            
            {/* Êú¨‰Ωì */}
            <div style={{ 
              flex: 1, 
              overflowY: 'auto', 
              padding: '24px',
              color: '#e2e8f0',
            }}>
              <ScheduledMeetingForm
                nestId={nestId}
                onCancel={() => setShowScheduledForm(false)}
                onSuccess={() => {
                  refreshUnifiedMeetings();
                  setShowScheduledForm(false);
                }}
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 16,
    backgroundColor: '#ffffff',
    borderBottomWidth: 1,
    borderBottomColor: '#e0e0e0',
  },
  headerTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#333333',
  },
  splitContainer: {
    flex: 1,
    flexDirection: 'row',
  },
  leftColumn: {
    width: 320,
    padding: 16,
  },
  rightColumn: {
    flex: 1,
    padding: 24,
  },
  searchInput: {
    padding: 12,
    borderWidth: 1,
    borderColor: '#e0e0e0',
    borderRadius: 4,
  },
  placeholderText: {
    fontSize: 16,
    color: '#757575',
    textAlign: 'center',
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#ffffff',
  },
  loadingText: {
    marginTop: 16,
    fontSize: 16,
    color: '#757575',
  },
  errorContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
    backgroundColor: '#ffffff',
  },
  errorTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#d32f2f',
    marginBottom: 8,
  },
  errorText: {
    fontSize: 16,
    color: '#757575',
    textAlign: 'center',
    marginBottom: 20,
  },
  retryButton: {
    paddingHorizontal: 20,
    paddingVertical: 10,
    borderRadius: 4,
    backgroundColor: '#4a6da7',
  },
  retryButtonText: {
    fontSize: 14,
    fontWeight: 'bold',
    color: '#ffffff',
  },
  createButton: {
    margin: 16,
    paddingVertical: 12,
    paddingHorizontal: 20,
    backgroundColor: '#4a6da7',
    borderRadius: 8,
    alignItems: 'center',
  },
  createButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: 'bold',
  },
  emptyStateContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  emptyStateText: {
    fontSize: 16,
    color: '#757575',
    textAlign: 'center',
  },
  modalOverlay: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
  },
  modal: {
    backgroundColor: '#fff',
    padding: 20,
    borderRadius: 10,
    width: '80%',
    maxWidth: 400,
  },
  modalHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 16,
  },
  modalTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333333',
  },
  modalClose: {
    padding: 8,
  },
  modalCloseText: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333333',
  },
  modalBody: {
    // Add any additional styles for the modal body if needed
  },
});

export default MeetingSpace; 